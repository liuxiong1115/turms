/*
 * Copyright (C) 2019 The Turms Project
 * https://github.com/turms-im/turms
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package im.turms.turms.workflow.dao.domain;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.Id;
import org.springframework.data.annotation.PersistenceConstructor;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.data.mongodb.core.mapping.Field;
import org.springframework.data.mongodb.core.mapping.Sharded;
import org.springframework.data.mongodb.core.mapping.ShardingStrategy;

import javax.validation.constraints.NotNull;
import java.util.Date;
import java.util.List;

/**
 * @author James Chen
 */
@Data
@AllArgsConstructor(onConstructor = @__(@PersistenceConstructor))
@Document
@Sharded(shardKey = UserRelationshipGroup.Fields.ID_OWNER_ID, shardingStrategy = ShardingStrategy.HASH, immutableKey = true)
public final class UserRelationshipGroup {

    public static final String COLLECTION_NAME = "userRelationshipGroup";

    @Id
    private final Key key;

    /**
     * Do not use the unique name of a relationship group as an ID because
     * it will cost a lot when updating the group name
     */
    @Field(Fields.NAME)
    private final String name;

    @Field(Fields.CREATION_DATE)
    private final Date creationDate;

    public UserRelationshipGroup(
            @NotNull Long ownerId,
            @NotNull Integer index,
            @NotNull String name,
            @NotNull Date creationDate) {
        this.key = new Key(ownerId, index);
        this.name = name;
        this.creationDate = creationDate;
    }

    @Data
    @AllArgsConstructor
    @NoArgsConstructor // Make sure spring can initiate the key and use setters
    public static final class Key {

        @Field(Fields.OWNER_ID)
        @Indexed
        private Long ownerId;

        /**
         * Note that the index value doesn't start from 0 and it is generated by the snowflake algorithm
         */
        @Field(Fields.GROUP_INDEX)
        private Integer groupIndex;

        public static class Fields {
            public static final String OWNER_ID = "oid";
            public static final String GROUP_INDEX = "gidx";

            private Fields() {
            }
        }
    }

    public static class Fields {
        public static final String ID_OWNER_ID = "_id." + Key.Fields.OWNER_ID;
        public static final String ID_GROUP_INDEX = "_id." + Key.Fields.GROUP_INDEX;
        public static final String NAME = "n";
        public static final String CREATION_DATE = "cd";

        private Fields() {
        }
    }

    @Data
    @AllArgsConstructor
    public static final class KeyList {
        private List<Key> keys;
    }
}